name: DEPLOY TO GCP

on:
  push:
    branches: [ "main" ]
    paths:
    # only the following paths will trigger github actions
      - src/**
      - .github/workflows/deploy.yml

  workflow_dispatch:

jobs:
    build:
      runs-on: ubuntu-latest

      steps:
      - uses: 'actions/checkout@v3'

      - id: 'validate'
        # here we validate the json file to have correct syntax
        name: "Validate resume.json"
        run: python3 -mjson.tool src/resume/resume.json > /dev/null || (echo "Invalid resume json" && exit 1)    
  
      - id: 'auth'
        # here we authenticate with GCP using Service Account
        # json stored in github secrets
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - id: 'setup'
        # here we setup gcloud / Cloud SDK to use it
        # later in the workflow
        name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v1'
    
      - id: 'list'
        # here we list existing buckets to decide if
        # the bucket needs to be created or already exists
        name: 'List buckets'
        run: echo buckets=$(gcloud storage buckets list --filter=name=${{ vars.GCS_BUCKET_NAME }} 2>&1) >> $GITHUB_OUTPUT

      - id: 'bucket'
        # here we create the bucket if we didn't find it during last step
        name: "(OPT) Create a Cloud Storage Bucket"
        run: gcloud storage buckets create gs://${{ vars.GCS_BUCKET_NAME }}
        if: ${{ steps.list.outputs.buckets == 'Listed 0 items.' }}
        
      - id: 'updload'
        # here we upload the file to the bucket
        name: "Upload file to the bucket"
        run: gsutil cp src/resume/resume.json gs://${{ vars.GCS_BUCKET_NAME }}/${{ vars.GCS_FILE_NAME }}

      - id: 'function'
        # here we deploy the function code
        name: "Create Cloud function"
        run: gcloud functions deploy ${{ vars.CLOUD_FUNCTION_NAME }} --gen2 --region=${{ vars.REGION }} --runtime=python311 --source=src/cf_code --entry-point=get_blob --trigger-http --set-env-vars BUCKET=${{ vars.GCS_BUCKET_NAME }},FILE=${{ vars.GCS_FILE_NAME }}

      - id: 'print'
        # here we output the curl command that can be used
        # to trigger the function
        name: "Print command to execute the function"
        run: |
          curl="curl -m 70 -X GET `gcloud functions describe ${{ vars.CLOUD_FUNCTION_NAME }} --format=\"get('url')\"` -H \"Authorization: bearer \$(gcloud auth print-identity-token)\""
          echo command=$curl >> $GITHUB_OUTPUT
          echo $curl

      - id: 'test'
        # here we test that deployed function actually returns the json from 
        # Cloud Storage bucket
        name: "Test url with curl"
        run: ${{ steps.print.outputs.command }}

      - id: 'notify'
        # here we notify of successful build using pushover
        # see https://pushover.net/ for details
        name: "(OPT) Send push notification on success"
        if: ${{ vars.RUN_TESTS }}
        run: |
          curl -s \
          --form-string "token=${{ secrets.NOTIFY_TOKEN }}" \
          --form-string "user=${{ secrets.NOTIFY_USER }}" \
          --form-string "message=\"$GITHUB_WORKFLOW\" workflow finished successfully" \
          https://api.pushover.net/1/messages.json
        